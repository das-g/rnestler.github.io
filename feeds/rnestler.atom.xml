<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>rnestler.github.io</title><link href="http://rnestler.github.io/" rel="alternate"></link><link href="http://rnestler.github.io/feeds/rnestler.atom.xml" rel="self"></link><id>http://rnestler.github.io/</id><updated>2015-02-04T00:00:00+01:00</updated><entry><title>Learning Rust</title><link href="http://rnestler.github.io/learning-rust.html" rel="alternate"></link><updated>2015-02-04T00:00:00+01:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2015-02-04:learning-rust.html</id><summary type="html">&lt;p&gt;Reading the news that Rust reached &lt;a class="reference external" href="http://blog.rust-lang.org/2015/01/09/Rust-1.0-alpha.html"&gt;1.0 Alpha&lt;/a&gt; I decided to take
a deeper look at &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;it&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="getting-rust"&gt;
&lt;h2&gt;Getting Rust&lt;/h2&gt;
&lt;p&gt;Installing Rust under arch is as easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pacman -S rust
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will install the latest version from the &lt;a class="reference external" href="https://www.archlinux.org/packages/community/x86_64/rust/"&gt;community repo&lt;/a&gt;.  If you want the
latest and greatest version you could also try &lt;a class="reference external" href="https://aur.archlinux.org/packages/rust-nightly/"&gt;the nightly build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The lazy people can try it &lt;a class="reference external" href="https://play.rust-lang.org/?code=%2F%2F%20This%20code%20is%20editable%20and%20runnable!%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%20World!%22%3B%0A%7D"&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World!&lt;/h2&gt;
&lt;p&gt;Here comes the obligatory &amp;quot;Hello World!&amp;quot; code in rust&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="immutability"&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;Beeing a &lt;a class="reference external" href="http://gamesfromwithin.com/wp-content/uploads/2010/07/const_nazi.mov"&gt;C++ const-nazi&lt;/a&gt; I
really liked that by default all variable bindings are immutable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example above will give you a compile error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mut.rs:4:5: 4:9 error: re-assignment of immutable variable &lt;span class="sb"&gt;`&lt;/span&gt;x&lt;span class="sb"&gt;`&lt;/span&gt;
mut.rs:4     x+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
             ^~~~
mut.rs:3:9: 3:10 note: prior assignment occurs here
mut.rs:3     &lt;span class="nb"&gt;let &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt;
                 ^
error: aborting due to previous error
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using the &amp;quot;mut&amp;quot; keyword we mark the variable as mutable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the code will print &amp;quot;2&amp;quot;&lt;/p&gt;
&lt;p&gt;Rust will also emit a warning when not using variables or an error when trying
to use uninitialized variables.&lt;/p&gt;
&lt;!-- Ownership, Borrowing and Livetime
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
One of the first things I tried out was the ownership concept: --&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="rust"></category></entry><entry><title>Run slock before going to sleep</title><link href="http://rnestler.github.io/run-slock-before-going-to-sleep.html" rel="alternate"></link><updated>2013-10-25T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2013-10-25:run-slock-before-going-to-sleep.html</id><summary type="html">&lt;p&gt;As noted in my previous post, I configured my system to run slock as soon as
the system enters sleep state.  This is how its done.&lt;/p&gt;
&lt;p&gt;First we create a new systemd unit in /etc/systemd/system called
suspend&amp;#64;.service&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;User suspend actions&lt;/span&gt;
&lt;span class="na"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sleep.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;%I&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;DISPLAY=:0&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/slock&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sleep.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what did we do? We created a unit that runs before sleep.target is reached.
This unit will run as a configurable user by enabling &lt;cite&gt;suspend&amp;#64;$USER.service&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;#&lt;/span&gt; systemctl &lt;span class="nb"&gt;enable suspend&lt;/span&gt;@&lt;span class="nv"&gt;$USER&lt;/span&gt;.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the /usr/bin/slock runs as $USER.  To be able to communicate with the
X-Server we need to set the DISPLAY variable to :0.&lt;/p&gt;
&lt;p&gt;So now when your system is going to sleep systemd should start slock.&lt;/p&gt;
&lt;p&gt;Sadly this works only for a one user system since the username is hardcoded
when enabling the unit file.  To make it work with multible users one would
need to create a script which determines which user is running the X-Server
then change to this user and lock the screen.&lt;/p&gt;
</summary><category term="systemd"></category><category term="slock"></category><category term="suspend"></category></entry><entry><title>Creating this Blog</title><link href="http://rnestler.github.io/creating-this-blog.html" rel="alternate"></link><updated>2013-10-23T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2013-10-23:creating-this-blog.html</id><summary type="html">&lt;p&gt;Recently a friend of mine asked me how I configured my system so that &lt;a class="reference external" href="http://tools.suckless.org/slock"&gt;slock&lt;/a&gt; locks the screen when I close the lid.&lt;/p&gt;
&lt;p&gt;Since I couldn't remember how I did it, I thought it's time to create a blog
where I can write down stuff like this.&lt;/p&gt;
&lt;p&gt;The same friend recommended me to use &lt;a class="reference external" href="http://getpelican.com/"&gt;pelican&lt;/a&gt; to
create my blog.&lt;/p&gt;
&lt;div class="section" id="setting-up-pelican"&gt;
&lt;h2&gt;Setting up pelican&lt;/h2&gt;
&lt;p&gt;Setting up pelican is quite straight forward. First I created a new developement environment with &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv blogenv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blogenv
&lt;span class="nv"&gt;$ &lt;/span&gt;. bin/acivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then installing pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to create the base structure with the interactive
pelican-quickstart&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir blog&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&lt;span class="nv"&gt;$ &lt;/span&gt;ls
content/            fabfile.py  output/         publishconf.py
develop_server.sh*  Makefile    pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it! Your pelican installation is finished! To generate your still empty blog is easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html
&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you can preview you blog on &lt;a class="reference external" href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrating-with-github-pages"&gt;
&lt;h2&gt;Integrating with github pages&lt;/h2&gt;
&lt;p&gt;Since I don't own any webspace I wanted to use the pages feature of &lt;a class="reference external" href="https://help.github.com/articles/user-organization-and-project-pages"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created two repositories&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;username/username.github.io-source, where I host the pelican sources&lt;/li&gt;
&lt;li&gt;username/username.github.io, where I host the generated output&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pelican supports this approach as seen in &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/tips.html#user-pages"&gt;http://docs.getpelican.com/en/3.3.0/tips.html#user-pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So all you need to do is to install ghp-import&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then change SITEURL in publishconf.py to &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and edit the
github target in the Makefile to look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
  ghp-import &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
  git push git@github.com:username.username.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ghp-import will create a branch in the current git repository called gh-pages
and commit any changes in the output directory to it. Then we push this branch
to the master branch in our username.github.io repository.&lt;/p&gt;
&lt;p&gt;So if you type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The blog gets published under &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="blog"></category></entry></feed>