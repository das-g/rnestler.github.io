<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog of rnestler</title><link href="http://rnestler.github.io/" rel="alternate"></link><link href="http://rnestler.github.io/feeds/2013.atom.xml" rel="self"></link><id>http://rnestler.github.io/</id><updated>2013-10-23T00:00:00+02:00</updated><entry><title>Creating this Blog</title><link href="http://rnestler.github.io/creating-this-blog.html" rel="alternate"></link><updated>2013-10-23T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2013-10-23:creating-this-blog.html</id><summary type="html">&lt;p&gt;Recently a friend of mine asked me how I configured my system so that &lt;a class="reference external" href="http://tools.suckless.org/slock"&gt;slock&lt;/a&gt; locks the screen when I close the lid.&lt;/p&gt;
&lt;p&gt;Since I couldn't remember how I did it, I thought it's time to create a blog
where I can write down stuff like this.&lt;/p&gt;
&lt;p&gt;The same friend recommended me to use &lt;a class="reference external" href="http://getpelican.com/"&gt;pelican&lt;/a&gt; to
create my blog.&lt;/p&gt;
&lt;div class="section" id="setting-up-pelican"&gt;
&lt;h2&gt;Setting up pelican&lt;/h2&gt;
&lt;p&gt;Setting up pelican is quite straight forward. First I created a new developement environment with &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv blogenv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blogenv
&lt;span class="nv"&gt;$ &lt;/span&gt;. bin/acivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then installing pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to create the base structure with the interactive
pelican-quickstart&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir blog; &lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&lt;span class="nv"&gt;$ &lt;/span&gt;ls
content/            fabfile.py  output/         publishconf.py
develop_server.sh*  Makefile    pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it! Your pelican installation is finished! To generate your still empty blog is easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html
&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you can preview you blog on &lt;a class="reference external" href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrating-with-github-pages"&gt;
&lt;h2&gt;Integrating with github pages&lt;/h2&gt;
&lt;p&gt;Since I don't own any webspace I wanted to use the pages feature of &lt;a class="reference external" href="https://help.github.com/articles/user-organization-and-project-pages"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created two repositories&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;username/username.github.io-source, where I host the pelican sources&lt;/li&gt;
&lt;li&gt;username/username.github.io, where I host the generated output&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pelican supports this approach as seen in &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/tips.html#user-pages"&gt;http://docs.getpelican.com/en/3.3.0/tips.html#user-pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So all you need to do is to install ghp-import&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then change SITEURL in publishconf.py to &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and edit the
github target in the Makefile to look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;github: publish
  ghp-import $(OUTPUTDIR)
  git push git@github.com:username.username.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ghp-import will create a branch in the current git repository called gh-pages
and commit any changes in the output directory to it. Then we push this branch
to the master branch in our username.github.io repository.&lt;/p&gt;
&lt;p&gt;So if you type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The blog gets published under &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="blog"></category></entry></feed>