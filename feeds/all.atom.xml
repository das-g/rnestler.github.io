<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>rnestler.github.io</title><link href="//rnestler.github.io/" rel="alternate"></link><link href="//rnestler.github.io/feeds/all.atom.xml" rel="self"></link><id>//rnestler.github.io/</id><updated>2017-04-25T00:00:00+02:00</updated><entry><title>Visiting Progressbar and Metalab</title><link href="//rnestler.github.io/visiting-progressbar-and-metalab.html" rel="alternate"></link><published>2017-04-25T00:00:00+02:00</published><updated>2017-04-25T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-25:/visiting-progressbar-and-metalab.html</id><summary type="html">&lt;p class="first last"&gt;Visiting Progressbar&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Since I hit the bars a bit too hard with some of the guys and gals of brmlab, I
had a bit of a hard time getting up in the morning.  Anyway, I quite enjoyed
relaxing a bit in the train while travelling to Bratislava.&lt;/p&gt;
&lt;div class="section" id="visiting-progressbar"&gt;
&lt;h2&gt;Visiting Progressbar&lt;/h2&gt;
&lt;p&gt;A member of the hackerspace, Andrew, described me pretty well on IRC how to get
to the &lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt; from the train station, while also getting quite a nice
look at Bratislava at the same time.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the Progressbar" src="/images/tour_de_hackerspace/progressbar/progressbar_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the &lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After arriving he gave me a tour around the space and then continued to repair
his bike.&lt;/p&gt;
&lt;p&gt;The space consists of a nice big main working / presentation / hang-out room.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Progressbar main room" src="/images/tour_de_hackerspace/progressbar/progressbar_main_room.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt; main room&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There's also a co-working / office room:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Progressbar co-working room" src="/images/tour_de_hackerspace/progressbar/progressbar_co_working_space_2.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt; co-working room&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And in the next room there's the kitchen:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Progressbar kitchen" src="/images/tour_de_hackerspace/progressbar/progressbar_kitchen_2.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt; kitchen&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On the opposite site of the space there is also a room with an electronic lab
and some tooling:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Progressbar electronic lab" src="/images/tour_de_hackerspace/progressbar/progressbar_electronic_lab.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt; electronic lab&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Of course the space also has some awesome decorations:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Progressbar animated LED bar" src="/images/tour_de_hackerspace/progressbar/progressbar_decoration.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://www.progressbar.sk/"&gt;Progressbar&lt;/a&gt; animated LED bar&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As soon as Andrew finished fixing his bike, we went to have dinner.  He then
continued to show me a bit of Bratislava and the local beer culture.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Outside of Progressbar in the old town" src="/images/tour_de_hackerspace/progressbar/progressbar_outside.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Outside of Progressbar in the old town&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The next day I took a look at the city, which is rather small but pretty.  In
the evening I attended the &lt;a class="reference external" href="https://scuttlebot.io/"&gt;scuttlebutt&lt;/a&gt; workshop in Progressbar.  Scuttlebutt
is some kind of distributed cryptographically signed message board, where every
identity has a append only feed.  I shortly tested the &lt;a class="reference external" href="https://github.com/ssbc/patchwork"&gt;patchwork&lt;/a&gt; scuttlebutt
application.  For me it felt a bit like a distributed Twitter.&lt;/p&gt;
&lt;p&gt;Since a few of the guys there are also Rustaceans we also talked about that,
and they told me that their door lock implementation runs with Rust.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Progressbar door lock system" src="/images/tour_de_hackerspace/progressbar/progressbar_door_lock_system.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Progressbar door lock system&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Later that evening we started to watch some 64k demos, of course including the
two I know of which are written in Rust:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pouet.net/prod.php?which=69658"&gt;Engage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=rWwNgVwQG1A"&gt;Logicoma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="64k demo time with animated LED bar on the left" src="/images/tour_de_hackerspace/progressbar/progressbar_demo_time.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;64k demo time with animated LED bar on the left&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I really enjoyed my time in Progressbar and their hospitality was amazing!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visiting-metalab-in-vienna"&gt;
&lt;h2&gt;Visiting Metalab in Vienna&lt;/h2&gt;
&lt;p&gt;The next day I actually spent in Vienna, which is just a 1h train ride away,
were I visited &lt;a class="reference external" href="https://metalab.at/"&gt;Metalab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The space is located centrally close to the &amp;quot;Rathaus&amp;quot;.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Metalab entry" src="/images/tour_de_hackerspace/metalab/metalab_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Metalab entry&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Just on arrival the space was actually empty (but open), because most of the
members were having dinner on the outside.  Just moments after that, two
members showed up and I asked them for a tour.  But one can't get a tour
without drinking some Mate!  So I bought a Flora Power from them after using
their self built &amp;quot;Kassomat&amp;quot; to get some coins!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Metalab Kassomat" src="/images/tour_de_hackerspace/metalab/metalab_kassomat.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Metalab Kassomat&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After that rather impressive start they continued to show me the rest of the
space:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Metalab 3D printers" src="/images/tour_de_hackerspace/metalab/metalab_3d_printer.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Metalab 3D printers&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Metalab almost obligatory laser cutter and electronic lab" src="/images/tour_de_hackerspace/metalab/metalab_laser_cutter_el_lab.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Metalab almost obligatory laser cutter and electronic lab&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;What really impressed me was there workshop, containing a decent CNC machine!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Metalab CNC" src="/images/tour_de_hackerspace/metalab/metalab_cnc.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Metalab CNC&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The space actually also includes a big main room, a kitchen, a lounge and some
storage and server rooms.  Sadly I didn't take any pictures of them.&lt;/p&gt;
&lt;p&gt;While getting rid of my processed Flora Power after the tour, I noticed the
rather beautiful decorations they have in their restrooms!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Metalab restroom decoration" src="/images/tour_de_hackerspace/metalab/metalab_toilet_decoration.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Metalab restroom decoration&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is even a little screen with a few buttons to play a video game, while
having a longer session.&lt;/p&gt;
&lt;p&gt;Since I had only a few hours to spend there, I just briefly attended their
member meeting, were they discussed some Metalab related issues.  The rest of
the time I mostly spent talking to some of them.&lt;/p&gt;
&lt;p&gt;If you're in Vienna I definitely recommend to check out Metalab, since it is a
quite amazing Hackerspace!  I'd loved to spend more time there, but again the
next chapter of my &amp;quot;Tour de Hackerspace&amp;quot; was calling!&lt;/p&gt;
&lt;/div&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting brmlab</title><link href="//rnestler.github.io/visiting-brmlab.html" rel="alternate"></link><published>2017-04-23T00:00:00+02:00</published><updated>2017-04-23T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-23:/visiting-brmlab.html</id><summary type="html">&lt;p class="first last"&gt;Visiting brmlab&lt;/p&gt;
</summary><content type="html">&lt;p&gt;After a quite pleasant night train ride I arrived around 7am in Prague.  This
left me with enough time to book my hotel and get to know the city a bit.&lt;/p&gt;
&lt;p&gt;I booked the &lt;a class="reference external" href="http://osmand.net/go?lat=50.090122&amp;amp;lon=14.437044&amp;amp;z=18"&gt;A plus Hostel&lt;/a&gt; close to the Florenc metro station which is in
the intersection of two metro lines, giving me a great starting point to
explore the city.&lt;/p&gt;
&lt;p&gt;Since the &lt;a class="reference external" href="https://brmlab.cz/"&gt;brmlab&lt;/a&gt; website showed, that the space is apparently open, I
decided to take a look at it quite early in the day.  I had some trouble
actually finding the space, so I advice you to use their &lt;a class="reference external" href="https://brmlab.cz/place"&gt;well written
description&lt;/a&gt; on how to find their space.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the brmlab" src="/images/tour_de_hackerspace/brmlab/brmlab_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the &lt;a class="reference external" href="https://brmlab.cz/"&gt;brmlab&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The space features some of the usual stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A big main working room&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/brmlab/brmlab_main_room.jpg"&gt;&lt;img alt="brmlab main working room" class="align-center" src="/images/tour_de_hackerspace/brmlab/brmlab_main_room.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A small server room&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/brmlab/brmlab_server_room.jpg"&gt;&lt;img alt="brmlab server room" class="align-center" src="/images/tour_de_hackerspace/brmlab/brmlab_server_room.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A workshop&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/brmlab/brmlab_workshop.jpg"&gt;&lt;img alt="brmlab workshop" class="align-center" src="/images/tour_de_hackerspace/brmlab/brmlab_workshop.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what really sets their hackerspace apart from others is that it features a
chemistry and a bio lab!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Parts of the bio lab with a microscope" src="/images/tour_de_hackerspace/brmlab/brmlab_micro_scope.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Parts of the bio lab with a microscope&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We did actually take a look at a small silicon wafer from unknown origin the
same evening.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Looking at a silicon wafer through the microscope" src="/images/tour_de_hackerspace/brmlab/brmlab_micro_scope_silicon.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Looking at a silicon wafer through the microscope&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Inside the bio lab there is also the relax zone / silent room.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Relax zone with awesome graffiti" src="/images/tour_de_hackerspace/brmlab/brmlab_silent_room.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Relax zone with awesome graffiti!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Quite stunning is their high voltage lab&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="brmlab high voltage lab" src="/images/tour_de_hackerspace/brmlab/brmlab_high_voltage_lab.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;brmlab high voltage lab&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It features some quite huge &lt;a class="reference external" href="images/tour_de_hackerspace/brmlab/brmlab_high_voltage_lab_2.jpg"&gt;Tesla coils&lt;/a&gt; and other high voltage equipment such
as high voltage capacitors, transformers or high voltage measurement systems.&lt;/p&gt;
&lt;p&gt;Also really impressive is the bitcoin ATM they have!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Bitcoin ATM" src="/images/tour_de_hackerspace/brmlab/brmlab_bitcoin_atm.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Bitcoin ATM&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I couldn't resist and &lt;a class="reference external" href="/images/tour_de_hackerspace/brmlab/brmlab_bitcoin_transaction.jpg"&gt;bought myself 6 mBTC&lt;/a&gt; immediately.  They told me that
this is the first prototype of the &lt;a class="reference external" href="https://www.generalbytes.com/first-bitcoin-atm-deployed/"&gt;General Bytes bitcoin ATM&lt;/a&gt;.  It was
installed in their space so they could test it.  During testing they found and
reported two security issues, which then could be fixed.&lt;/p&gt;
&lt;p&gt;Like most hackerspaces they also have some awesome decorations, in this case a
wall paneled with motherboards.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Wall of motherboards" src="/images/tour_de_hackerspace/brmlab/brmlab_motherboards.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Wall of motherboards&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The also own an &lt;a class="reference external" href="images/tour_de_hackerspace/brmlab/brmlab_ibm.jpg"&gt;IBM AS/400 system&lt;/a&gt; with a fitting hardware terminal which
gives one some possibilities to discover a mainframe style system.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Terminal connected to the IBM AS/400" src="/images/tour_de_hackerspace/brmlab/brmlab_ibm_terminal.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Terminal connected to the IBM AS/400&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It was real fun interacting with this machine!  You can find more information
about it on their &lt;a class="reference external" href="https://brmlab.cz/project/as400/start"&gt;wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all my Prague and brmlab experience was really amazing! The city is very
beautiful (albeit a bit crowed with tourists) and I enjoyed hanging out with a
few of the brmlab hackers the other night!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Overview of Prague" src="/images/tour_de_hackerspace/brmlab/brmlab_prague.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Overview of Prague&lt;/p&gt;
&lt;/div&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting Hackerspace Kraków</title><link href="//rnestler.github.io/visiting-hackerspace-krakow.html" rel="alternate"></link><published>2017-04-19T00:00:00+02:00</published><updated>2017-04-19T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-19:/visiting-hackerspace-krakow.html</id><summary type="html">&lt;p class="first last"&gt;Visiting Hackerspace Kraków&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Since the 3G connection during the train ride was exceptionally bad, I had
trouble with my credit card and the train didn't have electric plugs, I ran out
of battery before I could finish booking a hotel.&lt;/p&gt;
&lt;p&gt;So the first thing I did when arriving in Kraków was looking for the
&lt;a class="reference external" href="https://hackerspace-krk.pl/"&gt;Hackerspace Kraków&lt;/a&gt;.  Luckily it's very close to the main train station and
Wiktor, one of the members which talked to me on IRC, was waiting outside to
show me in!  This made me feel very welcome!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the Hackerspace Kraków" src="/images/tour_de_hackerspace/krakow/krakow_entry_1.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the &lt;a class="reference external" href="https://hackerspace-krk.pl/"&gt;Hackerspace Kraków&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After charging my devices, talking to my credit card company and booking my
hotel, he showed me around.  They've actually just moved in a few month ago and
the space isn't yet open for public, so they told me.  They are still thinking
about ideas on how to decorate the space.  I proposed to make the entry look
like a submarine since the corridor is very narrow and rounded on the top.  I'm
looking forward to see what they will do with the space.&lt;/p&gt;
&lt;p&gt;The space mainly consist of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An &lt;a class="reference external" href="/images/tour_de_hackerspace/krakow/krakow_electronic_lab.jpg"&gt;electronic lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="/images/tour_de_hackerspace/krakow/krakow_computer_room.jpg"&gt;computer / presentation room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="/images/tour_de_hackerspace/krakow/krakow_work_shop.jpg"&gt;workshop room&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the workshop they actually built the ventilation system themself!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Workshop ventilation system" src="/images/tour_de_hackerspace/krakow/krakow_work_shop_ventilation.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Workshop ventilation system&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And during my visit they actually built a controller board to be able to
regulate the speed of the ventilation system.  Was awesome to watch them
getting busy until 1 or 2am.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Workshop ventilation controller" src="/images/tour_de_hackerspace/krakow/krakow_work_shop_ventilation_controlled.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Workshop ventilation with freshly built controller on the bottom right&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;They also told me about some past and present projects.  In the past they
helped build the lightening system for the Galeria Krakowska, which is a big
shopping mall close to the main train station.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Galeria Krakowska lightening system" src="/images/tour_de_hackerspace/krakow/krakow_galeria.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Galeria Krakowska lightening system&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The green LED wall on the picture can actually change color and also show
different animations and effects.&lt;/p&gt;
&lt;p&gt;Another project they are working on is tracking and collecting &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Radiosonde"&gt;radiosondes&lt;/a&gt;.
This probes are used for weather related analysis and are started with weather
balloons by &lt;a class="reference external" href="http://radiosonde.eu/RS00-D/RS02C-D.html"&gt;weather stations&lt;/a&gt; all around Europe.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Captured radiosondes" src="/images/tour_de_hackerspace/krakow/krakow_radio_sonde_0.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Captured radiosondes&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;One of their member created a &lt;a class="reference external" href="https://hub.docker.com/r/teeed/dxlaprs/"&gt;Docker image&lt;/a&gt; which contains various software
related to tracking the radiosondes.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Setup used to track radiosondes" src="/images/tour_de_hackerspace/krakow/krakow_radio_sonde_tracking.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Setup used to track radiosondes&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Tracking coverage achieved with the setup above" src="/images/tour_de_hackerspace/krakow/krakow_radio_sonde_coverage.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Tracking coverage achieved with the setup above&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Since I took myself quite some time to have a look at the city (Which is
amazing, I can definitely recommend a visit to the &lt;a class="reference external" href="http://osmand.net/go?lat=50.05451&amp;amp;lon=19.936409&amp;amp;z=17"&gt;Wawel Castle&lt;/a&gt; and the
&lt;a class="reference external" href="http://osmand.net/go?lat=50.062&amp;amp;lon=19.937761&amp;amp;z=19"&gt;underground museum&lt;/a&gt;), I only showed up at the hackerspace for a quick goodbye
the other day.  But I really enjoyed my stay their nevertheless!&lt;/p&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting Warsaw Hackerspace</title><link href="//rnestler.github.io/visiting-warsaw-hackerspace.html" rel="alternate"></link><published>2017-04-17T00:00:00+02:00</published><updated>2017-04-17T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-17:/visiting-warsaw-hackerspace.html</id><summary type="html">&lt;p class="first last"&gt;Visiting Warsaw Hackerspace&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was warned on IRC that the activity would be rather low in the Warsaw
Hackerspace Due to being Easter.  So when I arrived in Warsaw I just monitored
their &lt;a class="reference external" href="http://at.hackerspace.pl/"&gt;member tracking site&lt;/a&gt; from time to time until it showed some people
being present.&lt;/p&gt;
&lt;p&gt;The entry to the space was a bit hard to find, because it's in the basement.
But they later told me, that they will move their space to a different location
next month anyway.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the Warsaw Hackerspace" src="/images/tour_de_hackerspace/warsaw/warsaw_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the &lt;a class="reference external" href="https://www.hackerspace.pl/"&gt;Warsaw Hackerspace&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On arrival they showed me around their hackerspace.  Of course they have a
laser-cutter &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; and some 3D printers.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Laser cutter and 3D printers" src="/images/tour_de_hackerspace/warsaw/warsaw_laser_cutter.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Laser cutter and 3D printers&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I was told, that the &lt;a class="reference external" href="https://www.hackerspace.pl/"&gt;Warsaw Hackerspace&lt;/a&gt; has around 100 members consisting of
a good mix of computer science, electronic engineering, mechanical engineering
and other people.&lt;/p&gt;
&lt;p&gt;What really impressed me was the equipment in their work shop! They have
amongst other stuff a CNC mill and &lt;a class="reference external" href="/images/tour_de_hackerspace/warsaw/warsaw_work_show_cnc_lathe.jpg"&gt;lathe&lt;/a&gt;,  which they control using
&lt;a class="reference external" href="http://linuxcnc.org/"&gt;linuxcnc&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="CNC mill" src="/images/tour_de_hackerspace/warsaw/warsaw_work_shop_cnc.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;CNC mill&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;They also have equipment to produce their own PCBs, using a cheap UV nail
curing lamp.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="PCB manufactoring equipment" src="/images/tour_de_hackerspace/warsaw/warsaw_pcb_manufactoring.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;PCB manufactoring equipment&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Also impressive was their retro computing collection! Amongst other devices
they own a VT520 terminal which they use to print the messages posted on IRC.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="VT520 terminal" src="/images/tour_de_hackerspace/warsaw/warsaw_vt520.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;VT520 terminal used to print IRC messages&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When I asked for a beverage, they showed me there vending machine, which is
broken and can't accept coins anymore.  But stand back, they hacked it to hook
up with their internal payment system!  It's apparently as simple as hooking up
a Raspberry Pi to the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Multidrop_bus#MDB_in_Vending_Machines"&gt;Multidrop bus&lt;/a&gt; to control the machine.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Hacked vending machine" src="/images/tour_de_hackerspace/warsaw/warsaw_vending_machine.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Hacked vending machine&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Later in the evening I had an awesome debugging session with one of their
members who tried to intercept C library calls (This was part of an university
assignment).  Since I never looked into how dynamic linking works in Linux,
this was very interesting for me!  Maybe I'll write a separate blog post about
that if I find time to dig a bit deeper into the topic.&lt;/p&gt;
&lt;p&gt;I really enjoyed the time I spent with this awesome and very active
hackerspace! My next stop will be Hackerspace Kraków!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We should really get a laser-cutter for coredump. This will be the first thing I will do when I return!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting c-base</title><link href="//rnestler.github.io/visiting-c-base.html" rel="alternate"></link><published>2017-04-15T00:00:00+02:00</published><updated>2017-04-15T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-15:/visiting-c-base.html</id><summary type="html">&lt;p class="first last"&gt;Visiting c-base&lt;/p&gt;
</summary><content type="html">&lt;p&gt;After an exhausting train ride from Amsterdam to Berlin which started at 20.25
and ended at 5.33 the next day, I discovered that I couldn't get a train the
same day to Warsaw since they were all fully booked!&lt;/p&gt;
&lt;p&gt;So my plans changed a bit and I would stay a full day in Berlin which was nice
in some way because it meant I could visit &lt;a class="reference external" href="https://www.c-base.org/"&gt;c-base&lt;/a&gt; in the evening!&lt;/p&gt;
&lt;p&gt;Also I discovered by coincidence that a few friends of mine from Switzerland
were staying in Berlin this weekend and I could hang out with them during the
day.  I also met with &lt;a class="reference external" href="https://twitter.com/andrewhobden"&gt;&amp;#64;andrewhobden&lt;/a&gt; in Berlin, whom I met at &lt;a class="reference external" href="http://2016.rustfest.eu/"&gt;RustFest
2016&lt;/a&gt; last year.  This was a very awesome coincidence, since we didn't plan
any of it and we just ended up meeting in Berlin and having a great time
together!&lt;/p&gt;
&lt;p&gt;So after dinner we split again and I headed towards c-base.  c-base is located
near the &amp;quot;Jannowitzbrücke&amp;quot; and thus very easily reachable with public
transport.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the c-base" src="/images/tour_de_hackerspace/cbase/cbase_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the c-base&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When entering c-base I was amazed because of all the very nicely done
decoration they have inside which leads to a great atmosphere!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="The Mate light" src="/images/tour_de_hackerspace/cbase/cbase_mate_light.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;The Mate light inside c-base&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The members in the space were a bit busy because they had their &amp;quot;circle&amp;quot;
meeting.  So I just started talking to the members not attending the meeting
and somehow got pretty absorbed giving one of them a rather in depth
introduction to basic embedded development using amongst other things&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.arduino.cc/"&gt;Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nongnu.org/avrdude/"&gt;avrdude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://openocd.org/"&gt;openocd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.segger.com/jlink-debug-probes.html"&gt;J-Link&lt;/a&gt; debuggers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kicad-pcb.org/"&gt;KiCad&lt;/a&gt; / &lt;a class="reference external" href="http://librepcb.org/"&gt;LibrePCB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dangerousprototypes.com/docs/Bus_Pirate"&gt;Bus Pirate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.i2c-bus.org/"&gt;I2C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This list serves primarily as a reference for him in case he forgot to
bookmark them ;)&lt;/p&gt;
&lt;p&gt;Since I was still very tired from the lack of sleep during the train ride from
Amsterdam to Berlin I originally planed to stay no longer as midnight.  But
since I got really busy and was invited to be given a show around the crashed
space station around 1am, I stayed until 2:30am.&lt;/p&gt;
&lt;p&gt;The guided tour through the spaceship was pretty awesome, thanks again to my
guide!  Since I didn't really take any pictures I recommend you to visit
&lt;a class="reference external" href="https://www.c-base.org/"&gt;c-base&lt;/a&gt; by yourself if you're around Berlin next time!&lt;/p&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting Technologia Incognita</title><link href="//rnestler.github.io/visiting-technologia-incognita.html" rel="alternate"></link><published>2017-04-13T00:00:00+02:00</published><updated>2017-04-13T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-13:/visiting-technologia-incognita.html</id><summary type="html">&lt;p class="first last"&gt;Visiting Technologia Incognita&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Getting a place to stay in Amsterdam was harder then I thought due to the fact,
that a lot of hotels and hostels where fully or almost fully booked!  I still
got a room after a bit of hassle (Thanks to this booking sites &amp;quot;only two rooms
left, book them now!&amp;quot;, I accidentally booked &amp;quot;1 bed in the women sleeping
room&amp;quot;, silly me) in the &amp;quot;WOW Amsterdam&amp;quot; hostel. It's not that close to the
center, but reachable with either bus or the metro.&lt;/p&gt;
&lt;p&gt;After the train ride from Düsseldorf and a bus ride to my hostel I took the
metro to &lt;a class="reference external" href="http://technologia-incognita.nl/"&gt;Technologia Incognita&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the Technologia Incognita" src="/images/tour_de_hackerspace/techinc/techinc_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the Technologia Incognita&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The space features the usual stuff with a kitchen, a &lt;a class="reference external" href="/images/tour_de_hackerspace/techinc/techinc_vending_machine_laser_cutter.jpg"&gt;laser-cutter&lt;/a&gt; (if you
look closely you will see they sell the Diplomatic Passport in their vending
machine on the left), a work shop and of course some &lt;a class="reference external" href="/images/tour_de_hackerspace/techinc/techinc_LED_ball.jpg"&gt;awesome decoration&lt;/a&gt;!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="animated LED fire place" src="/images/tour_de_hackerspace/techinc/techinc_fire.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Animated LED fire place&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I had the luck to arrive when they had their visiting day, so lots of people
where around.  Also sine the next day was the &lt;a class="reference external" href="https://conference.hitb.org/"&gt;Hack in the Box&lt;/a&gt; conference
some attendees of this conference where there as well.  I even met some guys
from the &lt;a class="reference external" href="https://www.nycresistor.com/"&gt;NYC Resistor&lt;/a&gt; which invited me to have a look at their hackerspace
next time I'm in New York (which will be around June).  They told me about a
project where they create almost impossible to solve &lt;a class="reference external" href="https://trmm.net/Platonic_puzzle"&gt;puzzles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also met &lt;a class="reference external" href="http://www.sasj.nl/"&gt;Saskia Freeke&lt;/a&gt; who creates amazing digital art!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Example of Saskias art" src="http://www.sasj.nl/W14/wp-content/uploads/2014/06/160518.gif" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Example of Saskias creative programming / digital art&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;She has a project where she creates similar work every single day since 2015!&lt;/p&gt;
&lt;p&gt;There was also a cheese, sausage and beer tasting on the same evening which I,
as a Swiss guy, definitely approve!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="cheese tasting" src="/images/tour_de_hackerspace/techinc/techinc_cheese_tasting.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Cheese and sausage tasting&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The next day I spontaneously attended the &lt;a class="reference external" href="https://conference.hitb.org/"&gt;Hack in the Box&lt;/a&gt; conference where
hackerspaces from the Netherlands also had booths.  I really enjoyed &lt;a class="reference external" href="http://toool.us/"&gt;Toools&lt;/a&gt;
lock-picking booth and the talk of Jos Weyers &lt;a class="reference external" href="http://conference.hitb.org/hitbsecconf2017ams/sessions/most-impressive-a-guide-to-key-impressioning-attacks/"&gt;Most Impressive: A Guide to Key
Impressioning Attacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While I really enjoyed my stay in Amsterdam and with &lt;a class="reference external" href="http://technologia-incognita.nl/"&gt;Technologia Incognita&lt;/a&gt;
and almost replanned my trip to spend a few more days there, I decided to stick
with my plan for once and travel to Warsaw via Berlin, with a short stop to
visit c-base.&lt;/p&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting the chaosdorf</title><link href="//rnestler.github.io/visiting-the-chaosdorf.html" rel="alternate"></link><published>2017-04-11T00:00:00+02:00</published><updated>2017-04-11T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-11:/visiting-the-chaosdorf.html</id><summary type="html">&lt;p class="first last"&gt;Visiting the chaosdorf&lt;/p&gt;
</summary><content type="html">&lt;p&gt;While my original &amp;quot;plan&amp;quot; involved traveling directly to Amsterdam from
Stuttgart, the shackspace guys suggested to visit chaosdorf in Düsseldorf,
since it is halfway to Amsterdam anyway.&lt;/p&gt;
&lt;p&gt;After asking if anybody will be present on their IRC channel #chaosdorf, I
decided to stay two days in Düsseldorf.&lt;/p&gt;
&lt;p&gt;Chaosdorf is awesomely close, just a 20min foot-walk, to the Düsseldorf main
station!  Also quite close is the Hostel A&amp;amp;O where I could stay.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="chaosdorf location" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_location.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="http://www.openstreetmap.org/?lat=51.217974999999996&amp;amp;lon=6.788995&amp;amp;zoom=16&amp;amp;layers=M&amp;amp;mlat=51.21656&amp;amp;mlon=6.78347"&gt;chaosdorf location&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Due to the central location and their prominent front door, they have some
random strangers walking in from time to time, which is pretty awesome!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="chaosdorf entrance" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_entrance.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;chaosdorf entrance&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For the 130 members they have, the rooms is already getting small, but is with
its 160m² still huge compared to coredump!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="main chaosdorf room" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_main_room_1.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;main chaosdorf room&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Their space features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A laptop lounge with presentation screen&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/chaosdorf/chaosdorf_main_room_0.jpg"&gt;&lt;img alt="chaosdorf laptop lounge" class="align-center" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_main_room_0.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A kitchen (with a nice hack for the &lt;a class="reference external" href="/images/tour_de_hackerspace/chaosdorf/chaosdorf_kitchen_hack.jpg"&gt;hood ventilator light&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/chaosdorf/chaosdorf_kitchen.jpg"&gt;&lt;img alt="chaosdorf kitchen" class="align-center" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_kitchen.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A laser cutter and 3D printers&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/chaosdorf/chaosdorf_laser_cutter.jpg"&gt;&lt;img alt="chaosdorf laser cutter / 3D printer" class="align-center" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_laser_cutter.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A combined smoking, TV and workshop room&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="/images/tour_de_hackerspace/chaosdorf/chaosdorf_work_shop.jpg"&gt;&lt;img alt="chaosdorf work shop" class="align-center" src="/images/tour_de_hackerspace/chaosdorf/chaosdorf_work_shop.jpg" style="width: 10%;" /&gt;&lt;/a&gt;
&lt;p&gt;Similar to shackspace some members in chaosdorf also cook dinner for the group
and I could join them on Tuesday evening.  Having a nice kitchen in your space
seems to pay off!&lt;/p&gt;
&lt;p&gt;Due to visiting in the midst of the week and not during the weekend, I couldn't
experience the full chaosdorf experience.  I would love to stay until Friday to
experience the &lt;a class="reference external" href="https://wiki.chaosdorf.de/Freitagsfoo"&gt;Freitagsfoo&lt;/a&gt;, but Amsterdam is calling!&lt;/p&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Visiting the shackspace</title><link href="//rnestler.github.io/visiting-the-shackspace.html" rel="alternate"></link><published>2017-04-09T00:00:00+02:00</published><updated>2017-04-09T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-09:/visiting-the-shackspace.html</id><summary type="html">&lt;p class="first last"&gt;Visiting the shackspace&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I arrived at Stuttgart at 5 pm.  During the train ride I asked on the
#shackspace IRC channel if somebody could recommend a place to stay.  All they
told me was I should avoid the &amp;quot;Ambiente&amp;quot;.  So I booked a hotel room close to
the &lt;a class="reference external" href="https://shack.space"&gt;shackspace&lt;/a&gt; which is 15 minutes from the main train station.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Me and Ferris arriving in Stuttgart" src="/images/tour_de_hackerspace/shackspace/arrival_stuttgart.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Me and &lt;a class="reference external" href="http://www.rustacean.net/"&gt;Ferris&lt;/a&gt; arriving in Stuttgart.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Soon after arriving at the hotel I went to the shackspace.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="Entry to the shackspace" src="/images/tour_de_hackerspace/shackspace/shack_entry.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Entry to the shackspace.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I had the luck that they were giving a tour to some visitors just when I
arrived, so I could join them.&lt;/p&gt;
&lt;p&gt;Coming from the rather small hackerspace &lt;a class="reference external" href="https://coredump.ch"&gt;coredump&lt;/a&gt; from Switzerland,
shackspace is huge!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="shackspace IT infrastructure" src="/images/tour_de_hackerspace/shackspace/shack_it.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;shackspace IT infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;They have around 400m² of room in their space, given them the possibility to have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A kitchen&lt;/li&gt;
&lt;li&gt;A big main working room&lt;/li&gt;
&lt;li&gt;A machine room with &lt;a class="reference external" href="/images/tour_de_hackerspace/shackspace/shack_laser_cutter.jpg"&gt;laser-cutter&lt;/a&gt;, 3D-printer, ...&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="/images/tour_de_hackerspace/shackspace/shack_work_shop.jpg"&gt;work shop&lt;/a&gt; with drilling machines, saws etc.&lt;/li&gt;
&lt;li&gt;A silent room, mainly used by student for learning&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="/images/tour_de_hackerspace/shackspace/shack_conference_room.jpg"&gt;conference room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/tour_de_hackerspace/shackspace/shack_roof.jpg"&gt;Amateur radio station&lt;/a&gt; with &lt;a class="reference external" href="/images/tour_de_hackerspace/shackspace/shack_view.jpg"&gt;antennas&lt;/a&gt; on the roof&lt;/li&gt;
&lt;li&gt;Around 200 members&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like every hackerspace they have lots of beautiful installations arround, like
a Back to the Future themed clock which also shows the founding date.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="shackspace founding date" src="/images/tour_de_hackerspace/shackspace/shack_founding_date.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Back to the Future themed clock&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;They also have a beautiful installation showing the open status of various
hackerspaces, gathered via the &lt;a class="reference external" href="https://spacedirectory.org/"&gt;SpaceAPI&lt;/a&gt;&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="SpaceAPI status wall" src="/images/tour_de_hackerspace/shackspace/shack_spaceapi_status.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;SpaceAPI status wall&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Since a member of the space was preparing food for dinner, they invited me
spontaneously to join them! This was awesome, since it meant spending more time
hacking and less searching for food ;)&lt;/p&gt;
&lt;p&gt;Later I joined the conference room, discussing ideas for the &lt;a class="reference external" href="https://2017.spaceappschallenge.org/"&gt;Space Apps
Challenge 2017&lt;/a&gt; for which the shakspace hosts a &lt;a class="reference external" href="https://2017.spaceappschallenge.org/locations/stuttgart/"&gt;hackathon&lt;/a&gt;.  Last year they
came up with a project to optimize the growth of plants with machine learning.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="shackspace plant experiment" src="/images/tour_de_hackerspace/shackspace/shack_space_apps_2016.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;shackspace plant experiment for Space Apps Challenge 2016&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I really enjoyed my stay at shackspace! It's a great hackerspace with lots of
creative and technically gifted people hacking on awesome projects.&lt;/p&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Starting my "Tour de Hackerspace"</title><link href="//rnestler.github.io/starting-my-tour-de-hackerspace.html" rel="alternate"></link><published>2017-04-08T00:00:00+02:00</published><updated>2017-04-08T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-04-08:/starting-my-tour-de-hackerspace.html</id><summary type="html">&lt;p class="first last"&gt;Starting my &amp;quot;Tour de Hackerspace&amp;quot;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Today I start what I call my &amp;quot;Tour de Hackerspace&amp;quot;! I'll be travelling around
Europe and visit various &lt;a class="reference external" href="https://wiki.hackerspaces.org/"&gt;hackerspaces&lt;/a&gt; on the way.  To keep travel costs at a
reasonable level, I bought an &lt;a class="reference external" href="http://www.interrail.eu/en"&gt;InterRail&lt;/a&gt; ticket, which allows flexible
travelling by train.&lt;/p&gt;
&lt;img alt="Map of Europe from https://wiki.hackerspaces.org/Europe" class="align-center" src="/images/tour_de_hackerspace/map_europe.png" style="width: 100%;" /&gt;
&lt;p&gt;Since I'm not the kind of person which is great at planing, this will be more
or less a spontaneous adventure.  I contacted some hackerspaces upfront and
received some great and welcoming responses, especially from the Eastern part
of Europe!&lt;/p&gt;
&lt;p&gt;My first location will be the &lt;a class="reference external" href="https://shack.space/"&gt;shackerspace&lt;/a&gt; in Stuttgart, Germany.  After that
I plan to visit a hackerspace in Amsterdam, then travelling a bit in the east
(Czech Republic, Poland, ...) and probably attend the &lt;a class="reference external" href="http://2017.rustfest.eu/"&gt;RustFest 2017&lt;/a&gt; in Kyiv,
Ukraine.&lt;/p&gt;
&lt;p&gt;According to my definitely not definitive plan I will then travel southwards
visiting Romania, Bulgaria, Croatia, Serbia, Bosnia and Herzegovina, Slovenia,
... before returning to Switzerland.&lt;/p&gt;
&lt;p&gt;I'm really looking forward to meet lots of amazing people and see how they live
and hack around Europe!&lt;/p&gt;
&lt;p&gt;I will try to write a blog post about every hackerspace I visit on my journey,
so stay tuned.&lt;/p&gt;
</content><category term="tour de hackerspace"></category><category term="hackerspace"></category><category term="travelling"></category></entry><entry><title>Switching from SLiM to LightDM</title><link href="//rnestler.github.io/switching-from-slim-to-lightdm.html" rel="alternate"></link><published>2017-01-22T00:00:00+01:00</published><updated>2017-01-22T00:00:00+01:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2017-01-22:/switching-from-slim-to-lightdm.html</id><summary type="html">&lt;p class="first last"&gt;Switching from SLiM to LightDM&lt;/p&gt;
</summary><content type="html">&lt;p&gt;For a long time I have been using &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/SLiM"&gt;SLiM&lt;/a&gt; as my display manager on ArchLinux.
It worked quite well for me, but is unmaintained since at least 3 years. Also
according to the &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/SLiM"&gt;ArchLinux WiKi&lt;/a&gt; there are issues regarding to systemd
compatibility. Also the Linux desktop is headed towards Wayland so I need a
display manager which can start Wayland sessions.&lt;/p&gt;
&lt;p&gt;So my choice fell on &lt;a class="reference external" href="https://freedesktop.org/wiki/Software/LightDM/"&gt;LightDM&lt;/a&gt;, which should &amp;quot;support different display
technologies (X, Mir, Wayland, ...)&amp;quot; according to their website.&lt;/p&gt;
&lt;p&gt;Installing it on ArchLinux is as easy as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S lightdm-gtk-greeter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to deactivate SLiM and activate LightDM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl disable slim.service
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; lightdm.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To switch without a reboot one needs to logout from the X-session, switch to a
TTY with Ctrl-Alt-1 and stop SLiM and start LightDM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl stop slim.service
sudo systemctl start lightdm.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that I could login just to notice that my &lt;cite&gt;~/.xinitrc&lt;/cite&gt; wasn't getting
executed, so my helper tools like nm-applet weren't running. Since I already
solved that issue under &lt;a class="reference external" href="https://rnestler.github.io/setting-up-the-awesome-window-manager-in-ubuntu-1604.html"&gt;Ubuntu&lt;/a&gt;, I was a bit surprised that I need to solve
it differently under ArchLinux according to &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/LightDM#Migrating_from_SLiM"&gt;the WiKi&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv ~/.xinitrc ~/.xprofile
vim ~/.xprofile &lt;span class="c1"&gt;# remove the &amp;quot;exec awesome&amp;quot; line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, I enjoy a working X-Session with the &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesome window manager&lt;/a&gt; again,
while looking forward to a Wayland based desktop, maybe running the &lt;a class="reference external" href="https://github.com/Immington-Industries/way-cooler"&gt;Way
Cooler&lt;/a&gt; window manager!&lt;/p&gt;
</content><category term="Linux"></category><category term="ArchLinux"></category><category term="SLiM"></category><category term="LightDM"></category></entry><entry><title>Fixing a Corrupt mandb Database</title><link href="//rnestler.github.io/fixing-a-corrupt-mandb-database.html" rel="alternate"></link><published>2016-11-26T00:00:00+01:00</published><updated>2016-11-26T00:00:00+01:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2016-11-26:/fixing-a-corrupt-mandb-database.html</id><summary type="html">&lt;p class="first last"&gt;Fixing a corrupt mandb database&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently, probably due to an unexpected power failure, the &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Man_page"&gt;man page&lt;/a&gt; cache on
my machine which is managed by &lt;tt class="docutils literal"&gt;mandb&lt;/tt&gt; got corrupt. I noticed when
&lt;tt class="docutils literal"&gt;systemctl&lt;/tt&gt; showed the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;man-db.service&lt;/span&gt;&lt;/tt&gt; as failed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% sudo systemctl
...
● man-db.service                     loaded failed failed    Update man-db cache
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;systemctl status&lt;/tt&gt; didn't reveal that much information on the issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% sudo systemctl status man-db.service
● man-db.service - Update man-db cache
   Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/usr/lib/systemd/system/man-db.service&lt;span class="p"&gt;;&lt;/span&gt; static&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class="o"&gt;)&lt;/span&gt;
   Active: failed &lt;span class="o"&gt;(&lt;/span&gt;Result: exit-code&lt;span class="o"&gt;)&lt;/span&gt; since Sam &lt;span class="m"&gt;2016&lt;/span&gt;-11-26 &lt;span class="m"&gt;16&lt;/span&gt;:47:53 CET&lt;span class="p"&gt;;&lt;/span&gt; 10min ago
  Process: &lt;span class="m"&gt;23481&lt;/span&gt; &lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/mandb &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/FAILURE&lt;span class="o"&gt;)&lt;/span&gt;
  Process: &lt;span class="m"&gt;23475&lt;/span&gt; &lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/mkdir -p /var/cache/man &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;/SUCCESS&lt;span class="o"&gt;)&lt;/span&gt;
 Main PID: &lt;span class="m"&gt;23481&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/FAILURE&lt;span class="o"&gt;)&lt;/span&gt;

Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo mandb&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23481&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Handbuchseiten unter /usr/share/man/ru.KOI8-R werden verar
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo mandb&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23481&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Alte Datenbankeinträge in /usr/share/man/tr werden gelösch
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo mandb&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23481&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Handbuchseiten unter /usr/share/man/tr werden verarbeitet
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo mandb&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23481&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Alte Datenbankeinträge in /usr/share/man/fi werden gelösch
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo mandb&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23481&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Handbuchseiten unter /usr/share/man/fi werden verarbeitet
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo mandb&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23481&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Alte Datenbankeinträge in /usr/share/man/zh werden gelösch
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: man-db.service: Main process exited, &lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/F
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Failed to start Update man-db cache.
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: man-db.service: Unit entered failed state.
Nov &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:47:53 tuxedo systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: man-db.service: Failed with result &lt;span class="s1"&gt;&amp;#39;exit-code&amp;#39;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I ran &lt;tt class="docutils literal"&gt;mandb&lt;/tt&gt; manually to figure out what was wrong:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% sudo mandb
Purging old database entries in /usr/share/man...
Processing manual pages under /usr/share/man...
Purging old database entries in /usr/share/man/sr@latin...
Processing manual pages under /usr/share/man/sr@latin...
...
Purging old database entries in /usr/share/man/zh...
gdbm fatal: Unexpected end of file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So gdbm seemed to have some problem. Since I didn't know what &lt;tt class="docutils literal"&gt;gdbm&lt;/tt&gt; was, I
asked the all knowingly package manager of ArchLinux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% pacman -Qi gdbm
Name            : gdbm
Version         : &lt;span class="m"&gt;1&lt;/span&gt;.12-2
Description     : GNU database library
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since it is a database library I assumed that the database must be corrupt.
Lucky enough &lt;tt class="docutils literal"&gt;mandb&lt;/tt&gt; provides an option to create the database from scratch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% sudo mandb -c

Processing manual pages under /usr/share/man...
Updating index cache &lt;span class="k"&gt;for&lt;/span&gt; path &lt;span class="sb"&gt;`&lt;/span&gt;/usr/share/man/man1&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;. Wait...mandb: warning: /usr/share/man/man1/gdk-pixbuf-csource.1.gz: whatis parse &lt;span class="k"&gt;for&lt;/span&gt; gdk-pixbuf-csource&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; failed
mandb: warning: /usr/share/man/man1/gdk-pixbuf-query-loaders.1.gz: whatis parse &lt;span class="k"&gt;for&lt;/span&gt; gdk-pixbuf-query-loaders&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; failed
...
Processing manual pages under /usr/local/man...
&lt;span class="m"&gt;124&lt;/span&gt; man subdirectories contained newer manual pages.
&lt;span class="m"&gt;22844&lt;/span&gt; manual pages were added.
&lt;span class="m"&gt;0&lt;/span&gt; stray cats were added.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It spilled my screen with lots of &lt;a class="reference external" href="https://gist.github.com/rnestler/0ad8fdeb54e732922721bd4ef785a8d9#file-mandb_c_output-txt"&gt;output and warnings&lt;/a&gt;, but seemed to finish
properly.&lt;/p&gt;
&lt;p&gt;It didn't help though and &lt;tt class="docutils literal"&gt;mandb&lt;/tt&gt; still failed. Looking at the output again I
noticed the line &lt;tt class="docutils literal"&gt;Purging old database entries in &lt;span class="pre"&gt;/usr/share/man/zh...&lt;/span&gt;&lt;/tt&gt;. To
see which package placed its manpage there I queried pacman again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C pacman -Qo /usr/share/man/zh
/usr/share/man/zh/ is owned by nmap &lt;span class="m"&gt;7&lt;/span&gt;.31-1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I tried to uninstall and reinstall nmap:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% sudo pacman -R nmap
% sudo mandb
% sudo pacman -S nmap
% sudo mandb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this time it finally worked! I'm still not sure what exactly triggered the
failure in the first place, but I'm not sure how to further debug it.&lt;/p&gt;
</content><category term="Linux"></category><category term="ArchLinux"></category><category term="man-db"></category></entry><entry><title>Verify Every Single Commit on a git rebase</title><link href="//rnestler.github.io/verify-every-single-commit-on-a-git-rebase.html" rel="alternate"></link><published>2016-10-31T00:00:00+01:00</published><updated>2016-10-31T00:00:00+01:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2016-10-31:/verify-every-single-commit-on-a-git-rebase.html</id><summary type="html">&lt;p class="first last"&gt;Check every commit when reordering commits with git rebase -i&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Sometimes when one uses &lt;tt class="docutils literal"&gt;git rebase &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/tt&gt; to reorder, split or merge commits,
we screw up the commits in between without noticing, since the final commit
compiles and passes every unit test.&lt;/p&gt;
&lt;p&gt;For example imagine we have this little Rust code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we want to show how nicely Rust can print a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::Vec&lt;/span&gt;&lt;/tt&gt; so we create a
branch: &lt;tt class="docutils literal"&gt;git checkout &lt;span class="pre"&gt;-b&lt;/span&gt; add_vector&lt;/tt&gt; and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v: {:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will compile and give us some wonderful output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run
v: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
Hello, world!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are satisfied with the changes and commit it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add src/main.rs
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Print vector&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We than add some more code to show the length of our fancy vector:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v: {:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v.len(): {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also works just fine so we commit it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add src/main.rs
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Print length of vector&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But of course we are not satisfied with the commit history and want to
rearrange our two commits. So we do a interactive rebase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rebase -i master
pick 8fc4573 Print length of vector
pick 6d22bd9 Print vector
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will succeed without error and we still receive the correct output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo run
v: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
Hello, world!
v.len&lt;span class="o"&gt;()&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we introduced a broken commit while rebasing! To detect this we can run the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rebase -i master -x &lt;span class="s2"&gt;&amp;quot;cargo build&amp;quot;&lt;/span&gt;

Executing: cargo build
   Compiling git_rebase_x_test v0.1.0 &lt;span class="o"&gt;(&lt;/span&gt;file:///home/rnestler/proggen/git_rebase_x_test&lt;span class="o"&gt;)&lt;/span&gt;
error&lt;span class="o"&gt;[&lt;/span&gt;E0425&lt;span class="o"&gt;]&lt;/span&gt;: unresolved name &lt;span class="sb"&gt;`&lt;/span&gt;v&lt;span class="sb"&gt;`&lt;/span&gt;
 --&amp;gt; src/main.rs:4:29
  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;     println!&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;v.len(): {}&amp;quot;&lt;/span&gt;, v.len&lt;span class="o"&gt;())&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt;                             ^
&amp;lt;std macros&amp;gt;:2:27: &lt;span class="m"&gt;2&lt;/span&gt;:58 note: in this expansion of format_args!
&amp;lt;std macros&amp;gt;:3:1: &lt;span class="m"&gt;3&lt;/span&gt;:54 note: in this expansion of print! &lt;span class="o"&gt;(&lt;/span&gt;defined in &amp;lt;std macros&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
src/main.rs:4:5: &lt;span class="m"&gt;4&lt;/span&gt;:38 note: in this expansion of println! &lt;span class="o"&gt;(&lt;/span&gt;defined in &amp;lt;std macros&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;

error: aborting due to previous error

error: Could not compile &lt;span class="sb"&gt;`&lt;/span&gt;git_rebase_x_test&lt;span class="sb"&gt;`&lt;/span&gt;.

To learn more, run the &lt;span class="nb"&gt;command&lt;/span&gt; again with --verbose.
Execution failed: cargo build
You can fix the problem, and &lt;span class="k"&gt;then&lt;/span&gt; run

    git rebase --continue
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will execute the command after &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt; for every commit and stop rebasing
if the command fails.  We now can go on and fix this commit and continue
rebasing.&lt;/p&gt;
&lt;p&gt;This little git feature allows us to not only have a nice looking, but also
&lt;em&gt;working&lt;/em&gt; git history after rebasing!&lt;/p&gt;
</content><category term="git"></category><category term="rebase"></category></entry><entry><title>Setting up the Awesome Window Manager in Ubuntu 16.04</title><link href="//rnestler.github.io/setting-up-the-awesome-window-manager-in-ubuntu-1604.html" rel="alternate"></link><published>2016-10-19T00:00:00+02:00</published><updated>2016-10-19T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2016-10-19:/setting-up-the-awesome-window-manager-in-ubuntu-1604.html</id><summary type="html">&lt;p class="first last"&gt;Setting up the awesome window manager under Ubuntu 16.04&lt;/p&gt;
</summary><content type="html">&lt;p&gt;My window manager of choice is the &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesome window manager&lt;/a&gt;. On my private
laptop I have it setup together with the display manager &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/SLiM"&gt;SLiM&lt;/a&gt; and a custom
&lt;tt class="docutils literal"&gt;.xinitrc&lt;/tt&gt; which starts a few helpers like the &lt;a class="reference external" href="https://wiki.gnome.org/Projects/GnomeKeyring"&gt;gnome-keyring-daemon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On my work laptop I have Ubuntu 16.04 installed.  Ubuntu uses &lt;a class="reference external" href="https://freedesktop.org/wiki/Software/LightDM/"&gt;LightDM&lt;/a&gt; (The
Light Display Manager) to manage logins. After installing awesome with &lt;tt class="docutils literal"&gt;sudo
apt install awesome&lt;/tt&gt; LightDM will allow you to start an awesome session.  This
is due to the &lt;tt class="docutils literal"&gt;/usr/share/xsessions/awesome.desktop&lt;/tt&gt; file contained in the
awesome package.&lt;/p&gt;
&lt;p&gt;Unfortunately this starts awesome directly and does not execute the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.xinitrc&lt;/span&gt;&lt;/tt&gt; file.  But it does load the various &lt;tt class="docutils literal"&gt;/etc/X11/Xsession.d/&lt;/tt&gt;
files which will then load the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.xsessionrc&lt;/span&gt;&lt;/tt&gt; file if it exists.  When
&lt;tt class="docutils literal"&gt;.xsessionrc&lt;/tt&gt; gets loaded it will pass the session to be started as the first
argument (&lt;tt class="docutils literal"&gt;$1&lt;/tt&gt;). So to start any helpers we create it with the following
content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# ~/.xsessionrc&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; in
awesome&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;gnome-keyring-daemon -s -c pkcs11,secrets,ssh,gpg&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This starts the gnome-keyring-daemon and export the &lt;tt class="docutils literal"&gt;SSH_AUTH_SOCK&lt;/tt&gt; variable,
but only if we are trying to start an awesome session.&lt;/p&gt;
</content><category term="Linux"></category><category term="Ubuntu"></category><category term="awesome window manager"></category></entry><entry><title>Debugging Rust code with vim and Conque-GDB</title><link href="//rnestler.github.io/debugging-rust-code-with-vim-and-conque-gdb.html" rel="alternate"></link><published>2016-05-25T00:00:00+02:00</published><updated>2016-05-25T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2016-05-25:/debugging-rust-code-with-vim-and-conque-gdb.html</id><summary type="html">&lt;p class="first last"&gt;Using vim together with Conque-GDB to debug Rust and C/C++ code.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;While I use debuggers quite a lot at work in IDEs such as VisualStudio, PyCharm
or QtCreator (of course all configured to use vim-like keybindings), I seldom
use them when working on my side projects.&lt;/p&gt;
&lt;p&gt;This is maybe due to the fact, that for my side project I mainly use vim
together with make/cmake, python or Rust and cargo. My &amp;quot;debugging&amp;quot; then
revolves mostly around printing variables and getting stacktraces with gdb if
something goes very wrong.&lt;/p&gt;
&lt;p&gt;Also, when programming in Rust, I never felt the need for a debugger, since one
hardly gets a segmentation fault.&lt;/p&gt;
&lt;p&gt;Nevertheless I thought it would be a good idea to try to integrate gdb within
vim to be able to debug code if necessary. After some sophisticated research
with &lt;a class="reference external" href="https://duckduckgo.com/?q=vim+gdb&amp;amp;ia=web"&gt;duckduckgo&lt;/a&gt;, I found quite
some vim plugins for gdb support and &lt;a class="reference external" href="https://stackoverflow.com/questions/6695410/gdb-front-end-to-use-with-vim"&gt;this stackoverflow entry&lt;/a&gt;
which compares some of them. The one that stood out for me was Conque-GDB
because it looked very simple yet powerful.&lt;/p&gt;
&lt;div class="section" id="conque-gdb"&gt;
&lt;h2&gt;Conque-GDB&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/vim-scripts/Conque-GDB"&gt;Conque-GDB&lt;/a&gt; is a very simple vim
plugin which provides a vim buffer that acts as a terminal emulator and runs
gdb in it.&lt;/p&gt;
&lt;p&gt;Further it provides some keybindings to control the gdb instance like
&lt;tt class="docutils literal"&gt;&amp;lt;Leader&amp;gt;r&lt;/tt&gt; to run the process or &lt;tt class="docutils literal"&gt;&amp;lt;Leader&amp;gt;b&lt;/tt&gt; to set a breakpoint at the
current line and so on. There is a small &lt;a class="reference external" href="https://www.youtube.com/watch?v=ZcSjaYSoqnc&amp;amp;feature=youtu.be"&gt;demonstration video&lt;/a&gt; available on
youtube which shows some of the capabilities of the plugin.&lt;/p&gt;
&lt;p&gt;If you use vundle to manage your vim plugins installing Conque-GDB is as easy
as adding&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &lt;span class="s1"&gt;&amp;#39;vim-scripts/Conque-GDB&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/tt&gt;. I found it quite useful since it allows you to do the
following things:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Set breakpoints from within vim&lt;/li&gt;
&lt;li&gt;Show the current position of execution in vim&lt;/li&gt;
&lt;li&gt;Examine the contents of variables from within vim&lt;/li&gt;
&lt;li&gt;Some more stuff!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="using-it-with-rust"&gt;
&lt;h2&gt;Using it with Rust&lt;/h2&gt;
&lt;p&gt;Conque-GDB allows to define your own gdb executable using the &lt;tt class="docutils literal"&gt;:ConqueGdbExe&lt;/tt&gt;
command.  To debug Rust code one probably wants to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rust-gdb&lt;/span&gt;&lt;/tt&gt; for pretty
printing support of Rust bindings.&lt;/p&gt;
&lt;p&gt;To debug Rust code we first set &lt;tt class="docutils literal"&gt;:ConqueGdbExe &lt;span class="pre"&gt;rust-gdb&lt;/span&gt;&lt;/tt&gt;. Then we start an
instance using &lt;tt class="docutils literal"&gt;:ConqueGdb &lt;span class="pre"&gt;target/debug/$name&lt;/span&gt;&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;$name&lt;/tt&gt; is the name of
the executable you want do debug. Then we may set some breakpoints using
&lt;tt class="docutils literal"&gt;&amp;lt;Leader&amp;gt;b&lt;/tt&gt; and finally run our program with &lt;tt class="docutils literal"&gt;&amp;lt;Leader&amp;gt;r&lt;/tt&gt;. When hitting a
breakpoint we can examine variables using &lt;tt class="docutils literal"&gt;&amp;lt;Leader&amp;gt;p&lt;/tt&gt; to print their content.&lt;/p&gt;
&lt;img alt="Vim screen shot using ConqueGdb" class="align-center" src="/images/vim_conque_gdb.png" style="width: 100%;" /&gt;
&lt;p&gt;For me this is quite a decent debugging experience while still being able to
stay in my favourite text editor!&lt;/p&gt;
&lt;p&gt;Do you have any comments, found a bug or an error? Please leave a note on
&lt;a class="reference external" href="https://www.reddit.com/r/rust/comments/4l226c/debugging_rust_code_with_vim_and_conquegdb/"&gt;Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="C++"></category><category term="Rust"></category><category term="vim"></category><category term="gdb"></category></entry><entry><title>C++ List of ScopeGuard</title><link href="//rnestler.github.io/c-list-of-scopeguard.html" rel="alternate"></link><published>2016-04-11T00:00:00+02:00</published><updated>2016-04-11T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2016-04-11:/c-list-of-scopeguard.html</id><summary type="html">&lt;p class="first last"&gt;Implementing a easy to use list of ScopeGuard&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently the developer of &lt;a class="reference external" href="https://github.com/LibrePCB/LibrePCB"&gt;LibrePCB&lt;/a&gt;
asked me about a C++ pattern to undo parts of an action if an exception gets
thrown in the middle of it.&lt;/p&gt;
&lt;p&gt;Of course he basically described the main usage of a ScopeGuard. I went ahead
and &lt;a class="reference external" href="https://github.com/LibrePCB/LibrePCB/pull/57"&gt;implemented one&lt;/a&gt; based on
a &lt;a class="reference external" href="https://channel9.msdn.com/Shows/Going+Deep/C-and-Beyond-2012-Andrei-Alexandrescu-Systematic-Error-Handling-in-C"&gt;talk by Andrei Alexandrescu&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="basic-use-of-a-scopeguard"&gt;
&lt;h2&gt;Basic use of a ScopeGuard&lt;/h2&gt;
&lt;p&gt;The ScopeGuard allows to write transactional code that will undo previous parts
if later code throws an exception.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myVector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scopeGuard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;myVector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop_back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Do stuff that may throw&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// everything worked, so don&amp;#39;t undo&lt;/span&gt;
&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if &lt;tt class="docutils literal"&gt;database.add(item)&lt;/tt&gt; throws, the item in myVector will be removed. For
more about the motivation behind ScopeGuard see the talk above or &lt;a class="reference external" href="http://www.drdobbs.com/cpp/generic-change-the-way-you-write-excepti/184403758"&gt;this drdobbs
article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using C++11 and later the implementation is fairly simple:&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mActive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mActive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;mActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;mActive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;ScopeGuard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;mF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;mF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mF&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;mF&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Fun&lt;/span&gt; &lt;span class="n"&gt;mF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scopeGuard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ScopeGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="why-a-scopeguardlist"&gt;
&lt;h2&gt;Why a ScopeGuardList?&lt;/h2&gt;
&lt;p&gt;If you have a transaction that consists of a lot of steps that may throw and
need to be undone it leads to code like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;doThing1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeGuard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;undoThing1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;doThing2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeGuard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;undoThing2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;doThing3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeGuard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;undoThing3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Do stuff that may trow&lt;/span&gt;

&lt;span class="n"&gt;guard1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;guard2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;guard3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things get even worse when doing something in a loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// how do we create a guard for every operation?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid that repetition and the potential error of a missing call to
&lt;tt class="docutils literal"&gt;dismiss()&lt;/tt&gt; we came up with a &lt;tt class="docutils literal"&gt;ScopeGuardList&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-with-std-function"&gt;
&lt;h2&gt;Implementation with std::function&amp;lt;&amp;gt;&lt;/h2&gt;
&lt;p&gt;A simple implementation just contains a list of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::function&amp;lt;&amp;gt;&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;scopeguard.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;ScopeGuardList&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ScopeGuardList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ScopeGuardList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScopeGuardList&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ScopeGuardBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;mScopeGuards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mScopeGuards&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;ScopeGuardList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nl"&gt;scopeGuard&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mScopeGuards&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;scopeGuard&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;mScopeGuards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emplace_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mScopeGuards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This implementation uses the type erasure of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::function&lt;/span&gt;&lt;/tt&gt; to store several
undo functions. While being fairly simple it performs worse compared to the
above ScopeGuard implementation.&lt;/p&gt;
&lt;p&gt;A quick benchmark showed that the &lt;tt class="docutils literal"&gt;ScopeGuard&lt;/tt&gt; performs ~14 times faster than
&lt;tt class="docutils literal"&gt;ScopeGuardList&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;scopeguardlist.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testScopeGuard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;time_point&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// make volatile to avoid optimizations
&lt;/span&gt;    &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;setByGuard0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;guard0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scopeGuard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt; &lt;span class="n"&gt;setByGuard0&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elapsed_seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Needed &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elapsed_seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;s for &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;setByGuard0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; loops&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testScopeGuardList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;time_point&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// make volatile to avoid optimizations
&lt;/span&gt;    &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;setByGuard0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;guardList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScopeGuardList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;guardList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt; &lt;span class="n"&gt;setByGuard0&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elapsed_seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Needed &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elapsed_seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;s for &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;setByGuard0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; loops&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testScopeGuard&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;testScopeGuardList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Benchmark with different optimization levels&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="11%" /&gt;
&lt;col width="41%" /&gt;
&lt;col width="48%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;-O$N&lt;/th&gt;
&lt;th class="head"&gt;Time[s] ScopeGuard&lt;/th&gt;
&lt;th class="head"&gt;Time[s] ScopGuardList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.178144&lt;/td&gt;
&lt;td&gt;2.61144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.0180427&lt;/td&gt;
&lt;td&gt;0.286136&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0.0170452&lt;/td&gt;
&lt;td&gt;0.283548&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0.0170423&lt;/td&gt;
&lt;td&gt;0.289958&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Since the &lt;tt class="docutils literal"&gt;ScopeGuardList&lt;/tt&gt; isn't used in any performance critical part in
LibrePCB we didn't look further for a better performing way without type
erasure.&lt;/p&gt;
&lt;p&gt;Do you have any comments, found a bug or an error? Please leave a note on
&lt;a class="reference external" href="https://www.reddit.com/r/cpp/comments/4ecf5a/c_list_of_scopeguard/"&gt;Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="C++"></category></entry><entry><title>Reading the SHTC1 smart gadget BLE device</title><link href="//rnestler.github.io/reading-the-shtc1-smart-gadget-ble-device.html" rel="alternate"></link><published>2015-08-16T00:00:00+02:00</published><updated>2015-08-16T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2015-08-16:/reading-the-shtc1-smart-gadget-ble-device.html</id><summary type="html">&lt;p class="first last"&gt;Connection to a SHTC1 smart gadget and read its sensor values&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;First we need to install the bluez bluetooth stack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S bluez bluez-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be able to switch the bluetooth on and off I use the bluetooth command from
tlp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S tlp
$ sudo bluetooth on
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we activate the bluetooth service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl daemon-reload
$ sudo systemctl start bluetooth.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connecting"&gt;
&lt;h2&gt;Connecting&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo hcitool dev
Devices:
        hci0    F8:16:54:CD:5F:CC
$ sudo hcitool lescan
LE Scan ...
BC:6A:29:C1:A9:3B SHTC1 smart gadget

$ sudo gatttool -b BC:6A:29:C1:A9:3B -I
&lt;span class="o"&gt;[&lt;/span&gt;BC:6A:29:C1:A9:3B&lt;span class="o"&gt;][&lt;/span&gt;LE&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; connect
Attempting to connect to BC:6A:29:C1:A9:3B
Connection successful
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reading-the-sensordata"&gt;
&lt;h2&gt;Reading the sensordata&lt;/h2&gt;
&lt;p&gt;According to &lt;a class="reference external" href="https://github.com/Sensirion/SmartGadget-iOS/blob/50dc0f36c0624f825f7637bceeb5a34da7c878f3/Classes/Peripheral/Services/Sensirion/Shtc1/Shtc1RhtService.m"&gt;the SmartGadget-iOS code&lt;/a&gt;
The UUID to read the temperature is 0xAA21.
So we try to read it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;BC:6A:29:C1:A9:3B&lt;span class="o"&gt;][&lt;/span&gt;LE&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; char-read-uuid 0xAA21
handle: 0x0025   value: &lt;span class="m"&gt;66&lt;/span&gt; 0b b9 &lt;span class="m"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first 16-bit value is the temperature and the second the humidity. Note
that the byte order of the values is big endian.&lt;/p&gt;
&lt;p&gt;So to calculate the measured temperature in python we need to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0b66&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;°C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;29.18&lt;/span&gt;&lt;span class="err"&gt;°&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;humidity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x14b9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;humidity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%RH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;53.05&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;RH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="BLE"></category><category term="bluetooth"></category><category term="bluez"></category><category term="SHTC1"></category><category term="SmartGadget"></category></entry><entry><title>Setting up airline-vim</title><link href="//rnestler.github.io/setting-up-airline-vim.html" rel="alternate"></link><published>2015-07-03T00:00:00+02:00</published><updated>2015-07-03T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2015-07-03:/setting-up-airline-vim.html</id><summary type="html">&lt;p class="first last"&gt;Setting up the airline-vim plug-in and configure the powerline fonts&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently I noticed, that my Vim configuration is getting a bit outdated. The
configuration of one of my mate had a fancy status line, showed syntax errors
when saving a buffer and he used &lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;vundle&lt;/a&gt; to manage his Vim plug-ins.  I used to
manage my Vim plug-ins with &lt;a class="reference external" href="https://github.com/archlinuxfr/yaourt"&gt;yaourt&lt;/a&gt;, a
package manager for &lt;a class="reference external" href="https://aur4.archlinux.org/"&gt;user packages&lt;/a&gt; in ArchLinux.&lt;/p&gt;
&lt;div class="section" id="installing-vundle"&gt;
&lt;h2&gt;Installing vundle&lt;/h2&gt;
&lt;p&gt;First one needs to get the vundle plug-in via git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then one needs to setup Vim to use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; off

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle&lt;span class="sr"&gt;/Vundle.vim/&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; vundle#rc&lt;span class="p"&gt;()&lt;/span&gt;

Plugin &lt;span class="s1"&gt;&amp;#39;gmarik/Vundle.vim&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there adding additional plug-ins is as easy as adding a &lt;tt class="docutils literal"&gt;Plugin ...&lt;/tt&gt; line
right after the vundle plug-in.&lt;/p&gt;
&lt;p&gt;So adding &lt;a class="reference external" href="https://github.com/bling/vim-airline"&gt;airline&lt;/a&gt; for a fancy status
line, &lt;a class="reference external" href="https://github.com/scrooloose/syntastic"&gt;syntastic&lt;/a&gt; as a syntax checker
and git support with &lt;a class="reference external" href="https://github.com/tpope/vim-fugitive"&gt;fugitive&lt;/a&gt; is as
easy as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &lt;span class="s1"&gt;&amp;#39;scrooloose/syntastic&amp;#39;&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;bling/vim-airline&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-airline"&gt;
&lt;h2&gt;Configuring airline&lt;/h2&gt;
&lt;p&gt;Out of the box airline does show the status bar only if at least one split is
active:&lt;/p&gt;
&lt;img alt="Vim screen shot with airline" class="align-center" src="/images/vim-airline0.png" style="width: 100%;" /&gt;
&lt;p&gt;Also the default symbols used in the statusline aren't that fancy. Adding &lt;tt class="docutils literal"&gt;set
laststatus=2&lt;/tt&gt; enables the statusline by default and &lt;tt class="docutils literal"&gt;let
g:airline_powerline_fonts = 1&lt;/tt&gt; lets one use the &lt;a class="reference external" href="https://github.com/powerline/fonts"&gt;powerline fonts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Configuring my terminal emulator of choice, urxvt, turned out to be a bit of a
hassle.&lt;/p&gt;
&lt;p&gt;Installing the fonts was easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/powerline/fonts.git
&lt;span class="nb"&gt;cd&lt;/span&gt; fonts
./install.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.Xresources&lt;/span&gt;&lt;/tt&gt; configure urxvt to use a powerline font:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;URxvt.font: xft:DejaVu Sans Mono &lt;span class="k"&gt;for&lt;/span&gt; Powerline:size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then reloading the configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xrdb -merge ~/.Xresources
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem was that urxvt didn't like that at all and displayed the fonts with
the spacing all messed up. After an hour of googling and trying out different
stuff, it turned out I just needed to kill and restart the urxvtd daemon!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% killall urxvtd
% urxvtd -q -o -f
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that it worked like a charm and the special symbols did show up nicely:&lt;/p&gt;
&lt;img alt="Vim screen shot with airline and powerline fonts" class="align-center" src="/images/vim-airline1.png" style="width: 100%;" /&gt;
&lt;/div&gt;
</content><category term="Vim"></category><category term="airline"></category><category term="urxvt"></category><category term="ArchLinux"></category></entry><entry><title>Serialization in Rust</title><link href="//rnestler.github.io/serialization-in-rust.html" rel="alternate"></link><published>2015-04-09T00:00:00+02:00</published><updated>2015-04-09T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2015-04-09:/serialization-in-rust.html</id><summary type="html">&lt;p class="first last"&gt;Using the Rust JSON serialization to implement the Space API&lt;/p&gt;
</summary><content type="html">&lt;p&gt;One of my first projects with Rust is the &lt;a class="reference external" href="https://spaceapi.net/"&gt;spaceapi&lt;/a&gt;
implementation of my local &lt;a class="reference external" href="https://coredump.ch"&gt;hackerspace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the source for it on &lt;a class="reference external" href="https://github.com/coredump-ch/spaceapi"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-space-api"&gt;
&lt;h2&gt;The Space API&lt;/h2&gt;
&lt;p&gt;The Space API is a rather simple JSON API used to expose information about a
hackerspace.  It consist of some static data like the location or some contact
information and some dynamic data like the current state of the space.&lt;/p&gt;
&lt;p&gt;Implementing JSON serialization in Rust is easy when using the &lt;a class="reference external" href="https://doc.rust-lang.org/rustc-serialize/rustc_serialize/json/index.html"&gt;rustc_serialize&lt;/a&gt;
crate.&lt;/p&gt;
&lt;p&gt;Using the &lt;tt class="docutils literal"&gt;#[derive(RustcEncodable)]&lt;/tt&gt; attribute on a type, serializing a
struct is as easy as calling &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;json::encode(&amp;amp;status).unwrap()&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;::&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(RustcEncodable)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;::&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;: &lt;span class="s"&gt;&amp;quot;0.13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt;: &lt;span class="s"&gt;&amp;quot;coredump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="s"&gt;&amp;quot;https://www.coredump.ch/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;space&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;coredump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.coredump.ch/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the field names map directly to keys in the JSON output. That
way we can model the Space API objects with structs and have a simple typesafe
solution!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-type-property"&gt;
&lt;h2&gt;The 'type' property&lt;/h2&gt;
&lt;p&gt;Unfortunately &lt;a class="reference external" href="http://spaceapi.net/documentation#documentation-ref-13-root-feeds-blog-type"&gt;parts&lt;/a&gt;
of the Space API contain the property &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; which is a keyword in Rust.
Of course using it as an identifier for a Struct field yields a compile error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[derive(RustcEncodable)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
main.rs:7:9: 7:13 error: expected identifier, found keyword `type`
main.rs:7     pub type: String,
                  ^~~~
&lt;/pre&gt;
&lt;p&gt;So we need to rename the field to something like &lt;tt class="docutils literal"&gt;_type&lt;/tt&gt; and change the
serialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-tojson"&gt;
&lt;h2&gt;Implementing ToJson&lt;/h2&gt;
&lt;p&gt;My first idea was to implement the &lt;a class="reference external" href="http://doc.rust-lang.org/rustc-serialize/rustc_serialize/json/trait.ToJson.html"&gt;ToJson&lt;/a&gt;
trait for Feed.  Implementing &lt;tt class="docutils literal"&gt;ToJson&lt;/tt&gt; is easy, there is just one method
&lt;tt class="docutils literal"&gt;to_json&lt;/tt&gt; which returns the &lt;tt class="docutils literal"&gt;Json&lt;/tt&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;::&lt;span class="n"&gt;ToJson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BTreeMap&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;::&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sadly this means the &lt;tt class="docutils literal"&gt;Feeds&lt;/tt&gt; struct can't hold the Feed struct directly
anymore, but needs it as a &lt;tt class="docutils literal"&gt;Json&lt;/tt&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[derive(RustcEncodable)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Feeds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;: &lt;span class="nc"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise the Encodable trait can't be derived anymore, because it's not
implemented for the type Feed.  Since this reduces type safety somewhat (we
could set &lt;tt class="docutils literal"&gt;blog&lt;/tt&gt; field to any Json string), I discarded this solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-encodable"&gt;
&lt;h2&gt;Implementing Encodable&lt;/h2&gt;
&lt;p&gt;To regain type safety we need to implement the &lt;a class="reference external" href="https://doc.rust-lang.org/rustc-serialize/rustc_serialize/trait.Encodable.html"&gt;Encodable trait&lt;/a&gt;
for Feed.
The required method for Encodable may be a bit intimidating at the first look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Encodable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;: &lt;span class="nc"&gt;Encoder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically it takes a reference to self and an Encoder and returns an &lt;a class="reference external" href="http://doc.rust-lang.org/nightly/core/result/enum.Result.html"&gt;Result&lt;/a&gt; containing
either &lt;tt class="docutils literal"&gt;OK()&lt;/tt&gt; on success or &lt;tt class="docutils literal"&gt;Err(S)&lt;/tt&gt; on failure.  But how does one use the
encoder?&lt;/p&gt;
&lt;div class="section" id="using-the-generated-code-as-base"&gt;
&lt;h3&gt;Using the generated code as base&lt;/h3&gt;
&lt;p&gt;After some googleing I found out that one can show the macro expanded source
code. It's kinda like the pre-processor output when coming from the C/C++
world.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rustc -Z unstable-options src/spaceapi.rs --pretty expanded
&lt;/pre&gt;
&lt;p&gt;The expanded code is pretty readable and it was easy to find the corresponding
trait implementation generated by the Rust compiler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;::&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;::&lt;span class="n"&gt;Encodable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__S&lt;/span&gt;: ::&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;::&lt;span class="n"&gt;Encoder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__arg_0&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-&amp;gt; ::&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;result&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__S&lt;/span&gt;::&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;: &lt;span class="nc"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__self_0_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="nc"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__self_0_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;__arg_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit_struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit_struct_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                                           &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                                           &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__self_0_0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                                       &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;::&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;result&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;::&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__try_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="n"&gt;__try_var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;::&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;result&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;::&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__try_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;::&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;result&lt;/span&gt;::&lt;span class="nb"&gt;Result&lt;/span&gt;::&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__try_var&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit_struct_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                                            &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                                            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__self_0_1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                                        &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So from there I tried to make the code a bit more readable which resulted in
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Encodable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;: &lt;span class="nc"&gt;Encoder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encoder&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;::&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;: &lt;span class="nc"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;: &lt;span class="nc"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit_struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit_struct_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit_struct_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The final encoded String looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.coredump.ch/feed/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Have comments? Discuss on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=9470475"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="Rust"></category><category term="JSON"></category><category term="hackerspace"></category></entry><entry><title>More Rust compared to C++</title><link href="//rnestler.github.io/more-rust-compared-to-c.html" rel="alternate"></link><published>2015-02-06T00:00:00+01:00</published><updated>2015-02-06T00:00:00+01:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2015-02-06:/more-rust-compared-to-c.html</id><summary type="html">&lt;p class="first last"&gt;More about the programming language Rust&lt;/p&gt;
</summary><content type="html">&lt;p&gt;After &lt;a class="reference external" href="http://rnestler.github.io/learning-rust.html"&gt;getting in touch with Rust&lt;/a&gt;, the next thing I was looking
at were pointers and the concept of ownership and borrowing in Rust.&lt;/p&gt;
&lt;div class="section" id="pointers"&gt;
&lt;h2&gt;Pointers&lt;/h2&gt;
&lt;p&gt;Rust has a lot of different pointer types, reminding me of the C++ references,
raw and smart pointers like &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/memory/unique_ptr"&gt;std::unique_ptr&lt;/a&gt;, &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/memory/shared_ptr"&gt;std::shared_ptr&lt;/a&gt;.  For a nice comparison
see &lt;a class="reference external" href="https://github.com/rust-lang/rust-wiki-backup/blob/master/Rust-for-CXX-programmers.rest"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="references"&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;One of the first pointer type you will meet in Rust is the reference type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In C++ this would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = %i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = %i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is think is nice in Rust is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's explicit that x will be modified (&lt;tt class="docutils literal"&gt;&amp;amp;mut x&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;It's guaranteed that x is neither dangling nor 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In C++ references have value syntax. To avoid that I prefer the &lt;a class="reference external" href="https://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Reference_Arguments"&gt;style&lt;/a&gt;
of using pointers for mutable and only &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; reference for immutable data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = %i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = %i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way the syntax looks much more like the Rust example, but you can pass 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Segmentation&lt;/span&gt; &lt;span class="n"&gt;fault&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="n"&gt;dumped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Trying the same with C++ references yields a compile error, because a non
&lt;tt class="docutils literal"&gt;const&lt;/tt&gt; reference can't bind to a temporary (rvalue)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reference.cpp: In function &amp;#39;int main()&amp;#39;:
reference.cpp:12:11: error: invalid initialization of non-const reference of type &amp;#39;int&amp;amp;&amp;#39; from an rvalue of type &amp;#39;int&amp;#39;
  add_one(0);
           ^
reference.cpp:3:6: note: in passing argument 1 of &amp;#39;void add_one(int&amp;amp;)&amp;#39;
 void add_one(int&amp;amp; num) {
      ^
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Surprising to me, doing the same within Rust works&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;adding one to {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; -&amp;gt; {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output: &lt;tt class="docutils literal"&gt;adding one to 0 &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; 1&lt;/tt&gt;.  Apparently one can bind mutable references
to temporaries in Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heap-pointers"&gt;
&lt;h3&gt;Heap pointers&lt;/h3&gt;
&lt;p&gt;For managing data on the heap Rust has the &lt;tt class="docutils literal"&gt;Box&amp;lt;T&amp;gt;&lt;/tt&gt; type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output: &lt;tt class="docutils literal"&gt;5&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The equivalent in C++ would be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_unique&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the compiler takes care of freeing the used resources as soon as x
goes out of scope. In the C++ world this is called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"&gt;RAII&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ownership-borrowing-and-lifetime"&gt;
&lt;h2&gt;Ownership, Borrowing and Lifetime&lt;/h2&gt;
&lt;p&gt;The Box type is an owning type. Meaning that it owns the resources it is
pointing to. The same is true for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::unique_ptr&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When passing a Box type to a function the ownership transfers to this function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;: &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will result in a compile error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;boxed.rs:10:20: 10:22 error: use of moved value: `*x`
boxed.rs:10     println!(&amp;quot;{}&amp;quot;, * x);
                               ^~
note: in expansion of format_args!
&amp;lt;std macros&amp;gt;:2:43: 2:76 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 2:78 note: in expansion of println!
boxed.rs:10:5: 10:24 note: expansion site
boxed.rs:9:13: 9:14 note: `x` moved here because it has type `Box&amp;lt;i32&amp;gt;`, which is non-copyable
boxed.rs:9     add_one(x);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because a Box owns the resource, x will become invalid.
If we try same in C++&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_unique&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will result in a segmentation fault:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% g++ -Wall -std=c++14 cpp_smart_pointers.cpp  -o cpp_smart_pointers
% ./cpp_smart_pointers
5
[1]    28585 segmentation fault (core dumped)  ./cpp_smart_pointers
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the unique_pointer moved from x into the function argument x remains
invalid and dereferencing it will leave it invalid.  Note that &lt;tt class="docutils literal"&gt;g++&lt;/tt&gt; doesn't
even issue a warning even when compiling this code with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-Wall&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;What I think is nice in the C++ version is the explicit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::move&lt;/span&gt;&lt;/tt&gt; which
makes it obvious to the reader, that &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; shouldn't be used afterwards.&lt;/p&gt;
&lt;p&gt;The compile errors Rust gives can be intimidating when learning Rust, since it
is not obvious from the code that &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; just moved.&lt;/p&gt;
&lt;p&gt;But Rust's lifetime concept doesn't stop here.  It even tracks down usage of
invalidated references.  Consider the following C++ code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%i, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Executing this code will output &lt;tt class="docutils literal"&gt;5, 0&lt;/tt&gt; on my machine.  According to the &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/container/vector#Iterator_invalidation"&gt;C++
standard&lt;/a&gt;
&lt;tt class="docutils literal"&gt;push_back&lt;/tt&gt; invalidates any reference to elements (iterators).  So accessing
it triggers undefined behaviour.&lt;/p&gt;
&lt;p&gt;Trying the same in Rust&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Triggers a compile error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rust_dangling.rs:6:5: 6:6 error: cannot borrow `v` as mutable because it is also borrowed as immutable
rust_dangling.rs:6     v.push(6);
                       ^
rust_dangling.rs:4:14: 4:15 note: previous borrow of `v` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `v` until the borrow ends
rust_dangling.rs:4     let x = &amp;amp;v[0];
                                ^
rust_dangling.rs:8:2: 8:2 note: previous borrow ends here
rust_dangling.rs:1 fn main() {
...
rust_dangling.rs:8 }
                   ^
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rust tries to tell us, that we can't change the vector, because there is still
a reference to it in scope, namely &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;!
To fix the issue we need to limit the scope of &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Have comments? Discuss on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=9329506"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="Rust"></category><category term="C++"></category></entry><entry><title>Learning Rust</title><link href="//rnestler.github.io/learning-rust.html" rel="alternate"></link><published>2015-02-04T00:00:00+01:00</published><updated>2015-02-04T00:00:00+01:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2015-02-04:/learning-rust.html</id><summary type="html">&lt;p class="first last"&gt;Learning the programming language rust&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Reading the news that Rust reached &lt;a class="reference external" href="http://blog.rust-lang.org/2015/01/09/Rust-1.0-alpha.html"&gt;1.0 Alpha&lt;/a&gt; I decided to take
a deeper look at &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;it&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="getting-rust"&gt;
&lt;h2&gt;Getting Rust&lt;/h2&gt;
&lt;p&gt;Installing Rust under arch is as easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -S rust
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will install the latest version from the &lt;a class="reference external" href="https://www.archlinux.org/packages/community/x86_64/rust/"&gt;community repo&lt;/a&gt;.  If you want the
latest and greatest version you could also try &lt;a class="reference external" href="https://aur.archlinux.org/packages/rust-nightly/"&gt;the nightly build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The lazy people can try it &lt;a class="reference external" href="https://play.rust-lang.org/?code=%2F%2F%20This%20code%20is%20editable%20and%20runnable!%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%20World!%22%3B%0A%7D"&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World!&lt;/h2&gt;
&lt;p&gt;Here comes the obligatory &amp;quot;Hello World!&amp;quot; code in Rust&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="immutability"&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;Beeing a &lt;a class="reference external" href="http://gamesfromwithin.com/wp-content/uploads/2010/07/const_nazi.mov"&gt;C++ const-nazi&lt;/a&gt; I
really liked that by default all variable bindings are immutable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example above will give you a compile error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mut.rs:4:5: &lt;span class="m"&gt;4&lt;/span&gt;:9 error: re-assignment of immutable variable &lt;span class="sb"&gt;`&lt;/span&gt;x&lt;span class="sb"&gt;`&lt;/span&gt;
mut.rs:4     &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
             ^~~~
mut.rs:3:9: &lt;span class="m"&gt;3&lt;/span&gt;:10 note: prior assignment occurs here
mut.rs:3     &lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 ^
error: aborting due to previous error
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using the &amp;quot;mut&amp;quot; keyword we mark the variable as mutable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the code will print &amp;quot;2&amp;quot;&lt;/p&gt;
&lt;p&gt;Rust will also emit a warning when not using variables or an error when trying
to use uninitialized variables.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="Rust"></category></entry><entry><title>Run slock before going to sleep</title><link href="//rnestler.github.io/run-slock-before-going-to-sleep.html" rel="alternate"></link><published>2013-10-25T00:00:00+02:00</published><updated>2013-10-25T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2013-10-25:/run-slock-before-going-to-sleep.html</id><summary type="html">&lt;p class="first last"&gt;How to configure systemd to run slock when going to sleep&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As noted in my previous post, I configured my system to run slock as soon as
the system enters sleep state.  This is how its done.&lt;/p&gt;
&lt;p&gt;First we create a new systemd unit in /etc/systemd/system called
suspend&amp;#64;.service&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;User suspend actions&lt;/span&gt;
&lt;span class="na"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sleep.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;%I&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;DISPLAY=:0&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/slock&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sleep.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what did we do? We created a unit that runs before sleep.target is reached.
This unit will run as a configurable user by enabling &lt;cite&gt;suspend&amp;#64;$USER.service&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; suspend@&lt;span class="nv"&gt;$USER&lt;/span&gt;.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the /usr/bin/slock runs as $USER.  To be able to communicate with the
X-Server we need to set the DISPLAY variable to :0.&lt;/p&gt;
&lt;p&gt;So now when your system is going to sleep systemd should start slock.&lt;/p&gt;
&lt;p&gt;Sadly this works only for a one user system since the username is hardcoded
when enabling the unit file.  To make it work with multible users one would
need to create a script which determines which user is running the X-Server
then change to this user and lock the screen.&lt;/p&gt;
</content><category term="systemd"></category><category term="slock"></category><category term="suspend"></category></entry><entry><title>Creating this Blog</title><link href="//rnestler.github.io/creating-this-blog.html" rel="alternate"></link><published>2013-10-23T00:00:00+02:00</published><updated>2013-10-23T00:00:00+02:00</updated><author><name>rnestler</name></author><id>tag:rnestler.github.io,2013-10-23:/creating-this-blog.html</id><summary type="html">&lt;p class="first last"&gt;How and why I created this blog.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently a friend of mine asked me how I configured my system so that &lt;a class="reference external" href="http://tools.suckless.org/slock"&gt;slock&lt;/a&gt; locks the screen when I close the lid.&lt;/p&gt;
&lt;p&gt;Since I couldn't remember how I did it, I thought it's time to create a blog
where I can write down stuff like this.&lt;/p&gt;
&lt;p&gt;The same friend recommended me to use &lt;a class="reference external" href="http://getpelican.com/"&gt;pelican&lt;/a&gt; to
create my blog.&lt;/p&gt;
&lt;div class="section" id="setting-up-pelican"&gt;
&lt;h2&gt;Setting up pelican&lt;/h2&gt;
&lt;p&gt;Setting up pelican is quite straight forward. First I created a new developement environment with &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv blogenv
$ &lt;span class="nb"&gt;cd&lt;/span&gt; blogenv
$ . bin/acivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then installing pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to create the base structure with the interactive
pelican-quickstart&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir blog&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; blog
$ pelican-quickstart
$ ls
content/            fabfile.py  output/         publishconf.py
develop_server.sh*  Makefile    pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it! Your pelican installation is finished! To generate your still empty blog is easy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html
$ make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you can preview you blog on &lt;a class="reference external" href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrating-with-github-pages"&gt;
&lt;h2&gt;Integrating with github pages&lt;/h2&gt;
&lt;p&gt;Since I don't own any webspace I wanted to use the pages feature of &lt;a class="reference external" href="https://help.github.com/articles/user-organization-and-project-pages"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created two repositories&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;username/username.github.io-source, where I host the pelican sources&lt;/li&gt;
&lt;li&gt;username/username.github.io, where I host the generated output&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pelican supports this approach as seen in &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/tips.html#user-pages"&gt;http://docs.getpelican.com/en/3.3.0/tips.html#user-pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So all you need to do is to install ghp-import&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then change SITEURL in publishconf.py to &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and edit the
github target in the Makefile to look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
  ghp-import &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
  git push git@github.com:username.username.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ghp-import will create a branch in the current git repository called gh-pages
and commit any changes in the output directory to it. Then we push this branch
to the master branch in our username.github.io repository.&lt;/p&gt;
&lt;p&gt;So if you type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The blog gets published under &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry></feed>